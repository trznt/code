<!doctype html>
<html lang="en">
<head>
  <% include ../../../partials/code/enu/head.ejs %>
  <title>Setting Up the C Programming Language</title>
</head>

<header>
  <% include ../../../partials/code/enu/main-header.ejs %>
</header>

<body>
<main role="main">

  <!-- Main jumbotron for a primary marketing message or call to action -->
  <div class="jumbotron front_page">
    <div class="container"><br /><br /><br /><br /><br />
      <h1 class="display-1">C Programming</h1>
    </div>
  </div>

  <div class="container-fluid">
    <!-- Example row of columns -->
    <br />
    <div class="row">
      <% include ../../../partials/code/enu/sidenav.ejs %>
      <div class="col">
        <br />
        <h2>A closer look at "Hello World"</h2><br /><br />
        <pre class="code-snippet-c">
         #include &lt;stdio.h&gt;
         void main()
         {
           printf("hello world\n");
         }
       </pre>
        <p class="front_page_desc"><br />You might be wondering what each of words and lines in the program mean. Let's take apart the program that we executed in the last example and look at it line by line.<br /><br /></p>
        <p class="code-snippet-c">
          #include &lt;stdio.h&gt;
        </p><br />
        <p class="front_page_desc">
          This line signifies a Preprocessor Directive. These directives always begin with contains a set of standard instructions or <b>functions</b> also callied a library that is shipped along with the compiler. It's like a pre-packaged set of instructions and operations that make it easier for you to concentrate on writing the actual task at hand and helps to avoid re-writing many of the basic operations that the computer needs to perform as part of executing your program. For eg - reading data from a file or writing to a file - writing to the console or reading from a console. sdtio - basically means standard input/output.  These pre-written, built-in instructions can be used when needed, without having to write the instructions from scratch. We will look at many of these functions in detail in the coming articles.
        </p> <br />
        <p class="code-snippet-c">
          void main()
        </p><br />
          <p class="front_page_desc"> This is the starting point from where the CPU will execute each instruction we lay out. When the compiler sees <b>main()</b>, it knows thats where to start executing tasks one by one - in order. The parantheses <b>()</b> in C programming language indicate that this is a <b>function</b>. <br /><br />A function is a way to logially group instructions that together perform a small task. For eg, we can write a function to add two numbers,  to take a picture, to send a packet of data over the network, anything. We will learn more about functions in detail at a later time.<br /><br />
          For now, by writing <b>main()</b> we are telling the compiler that this is our main function and thats the place where the CPU should start executing the tasks one by one. Note - The first word <b>void</b> has a special meaning with respect to the function and we will also talk about this when we learn about functions in detail.</p><br /><br />
          <p class="code-snippet-c">
            {
          </p>
          <p class="front_page_desc"> As mentioned previously a function is a way to group together a set of instructions that perform a task. The grouping is placed in a pair of braces <b>{ }</b>. The symbol '{' signifies the start of the function.</p><br />
          <p class="code-snippet-c">
            printf("hello world\n");
            <p class="front_page_desc"> This line is the first instruction of our program. <b>printf("hello world\n")</b> is the name of a function - we know its a function because it has <b>()</b> in the name. This function prints whatever word we type between the <b>()</b> on the screen. Do note that the quotes should be used to specify the word or sentence - or you will get an error when we run the program.<br />
            </p><br />

          <p class="code-snippet-c">
          }
          </p>
          <p class="front_page_desc"> The symbol '}' signifies the end of the main function. The instructions that are present within the {} is called the function definition. </p><br />

          <p class="front_page_desc">
            In essence, we basically performed function <b>printf</b> from within the <b>main</b> function. But notice how the printf function has no associated {} brackets to specify any group of instructions. This is because the prtinf is a built-in function and it's instructions are already located in stdio.h. We don't need to re-write those instructions. If you are writing a brand new function, then you will have to list down each instruction for the task within the {} brackets.
          </p><br />
          <p class="front_page_desc">
          <b><u>What happened to the /n?</u></b> When the program runs we get an output of <b>hello world</b> But what happened to the <b>\n</b>. It's gone, it's almost like it disappered or <b>escaped</b> from the output. <br /><br />
            In programming languages any <b>\</b> is a way to signify something called an <b>escape character</b> or an <b>escape sequence</b> . Escape characters perform special actions when the output is generated on screen. In this case <b>\n</b> signals a <b>line break</b> or a  <b>line feed</b> which makes the cursor move to the next line. Try placing the <b>\n</b> between the <b>hello</b> and <b>world</b> as shown below and see what the output looks like when you run the program.
          </p><br />
          <p class="code-snippet-c">
          printf("hello\nworld");
        </p><br /><br />
        <p class="front_page_desc">When you run the program you will see that the word <b>hello</b> is on one line and <b>world</b> is on the next line.</p></br>
        <p class="code-snippet">
          hello<br />world
        </p><br /><br />
          <p class="front_page_desc">
         The <b>\n</b> has performed a line break operation. Hence this escape character help's us to format output on the screen. There are several types of escape characters. Some of them are listed below. You can try them out and see what happens.
        </p>
        <br /><br />
        <h4>Escape Characters</h4>
        <table class="table">
          <thead>
            <tr>
              <th scope="col">Escape Character</th>
              <th scope="col">Operation</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>\n</td>
              <td>Performs a line feed operation</td>
            </tr>
            <tr>
              <td>\t</td>
              <td>Performs a horizontal tab operation</td>
            </tr>
            <tr>
              <td>\b</td>
              <td>Performs a backspace operation on the screen</td>
            </tr>
            <tr>
              <td>\v</td>
              <td>Performs a vertical tab operation</td>
            </tr>
            <tr>
              <td>\\</td>
              <td>To print a single \ on the screen</td>
            </tr>
            <tr>
              <td>\"</td>
              <td>To print a single " on the screen.</td>
            </tr>
          </tbody>
        </table><hr /><br /><br />
      </div>
      <div class="col-md-2">
      </div>
    </div>

    <hr>

  </div> <!-- /container -->

</main>

  <% include ../../../partials/code/enu/tail.ejs %>
  <% include ../../../partials/code/enu/main-footer.ejs %>
