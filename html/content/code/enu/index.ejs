<!doctype html>
<html lang="en">
<head>
  <% include ../../../partials/code/enu/head.ejs %>
  <title>Coding Introduction</title>
</head>

<header>
  <% include ../../../partials/code/enu/main-header.ejs %>
</header>

<body>
<main role="main">

  <!-- Main jumbotron for a primary marketing message or call to action -->
  <div class="jumbotron front_page">
    <div class="container"><br /><br /><br /><br /><br />
      <h1 class="display-1">Code</h1>
    </div>
  </div>

  <div class="container-fluid">
    <!-- Example row of columns -->
    <br />
    <div class="row">
      <% include ../../../partials/code/enu/sidenav.ejs %>
      <div class="col">
        <br />
        <h2>Introduction<br /><br />
        <p class="front_page_desc"><br />What is programming? At the heart of the computer is the CPU (Central Processing Unit) and when you need to instruct a computer, this is the component you are speaking to. Now, a computer doesn't understand plain english. At a physical level the computer understands only electric signals. The OFF and the ON state, also known as 0 or 1 state. These off and on states are processed by an array of transistors to derive logic and facilitate mathematical calculations. <br /><br />To instruct a computer to do anything, we first need to write an <a href="/algo">algorithm</a>. The sole purpose of the algorithm is to come up with an effecient way to tell the computer <b>how</b> to perform the task. Once we have the algorithm, we need to translate the algorithm to a language that the computer understands. There are two kinds of languages - low level languages and high level languages.<br /><br /></p>
        <h3 id="low">Low level programming</h3><br />

        <p class="front_page_desc">  Low level computer languages are for the most perfect way to tell a CPU how to perform an activity. But it's not something that humans can do easily - as machines and humans speak entirely different languages - so different that machine and humans languages don't even share the concept of the alphabet. Computers only understand 1's and 0's. The best way to ask a computer to do a task is to translate your algorithm into streams of 1's an 0's and feed it into a computer.</p><br />

          <h4>Machine Code</h4><br />


            <p class="front_page_desc"> All computer programs actually look like this - A sequence of 1's and 0's - This is called machine code. <br /><br />

          <p class="code-snippet">
            111101010000101110001010110000101011001001011000100101001..........
          </p> <br /><br />

          <p class="front_page_desc">It probably doesn't look like any language you have seen before. Its actually tough to understand even for the best programmers of the world today. It is impractical to instruct your computer directly with the language of 1's and 0's. The binary langauge as you can see is so different compared to the language that humans speak. So, it was then decided to come up with a language that is a bit more "human readable".</p><br />



          <h4>Assembler Code</h4><br />
          <p class="front_page_desc">To make programming accessible to humans, they had to come up with a way to encode the stream of 1's and 0's into a human readable form. Let's imagine there is a sequence like 1001 0001 which the machine understands as adding 1 to a particular number that is stored in the computer. Every single time instead of writing this sequence to add 1 to a number, why not subtitute a tag like 'ADD 1' to signify those 1's and 0's to the computer. So now instead of feeding 1001 0001 everything, you can just use 'ADD 1' to instruct the computer. Things are now a bit more easier to understand. This type of programming language is called Assembler coding.

            <p class="code-snippet">
              ADD EAX,5
            </p>

            <p class="front_page_desc">
              The above line asks the computer to take a number 5 and add it to whatever the number is that is stored in EAX. Note - EAX is actually a physical place in the micro processor of the computer. So as you can see, Assember code talks directly to the CPU and referring to physical areas within the CPU. </p>
                <p class="front_page_desc">It's quite involved when you think about it. If you wanted your computer to add all numbers from 1 to a 100 and determine the average. You would need to decide which parts of the CPU you will use, how to use it, and determine where to store the intermediate results etc. But at the same time, the advantages of using an assembler is that you get full control to the underlying CPU and you can tell it exactly how the flow of 1's and 0's happen within your processor.
            </p>
            <br /><br />
            <h3  id="high">High level programming</h3><br />


            <p class="front_page_desc">When you to get the computer to add all the numbers from 1 to a 100 and then get the average of all the numbers - and you don't want to hassle yourself with the exact path the 1's and 0's take on your computer, then a high level language is the best way forward. What you need is something that gives you sufficent flexibility but also doesn't let you get bogged down with the details. </p><br />
              <p class="front_page_desc">
                Every computer processor manufacturer out there can also have their own way of tagging streams of bits. The labels and <b>syntax</b> used by one processor can be different on another. High level languages do not change, for the most part, from one processor to another. So when you learn these languages it's easy to write your instructions for any computer system using the same language.
              </p><br />
         <p class="front_page_desc">If you are looking to become a programmer and create great new things for the future - you will need to atleast learn a few important languages to begin with. These languages will be useful to you because they are the fundamental programmraning languages that will let you understand the basics of programming. These langauges are also widely used and almost any computer system understands them. Once you master them, all other langauges will be quite easy to understand. Let's look at some of them:</p><br />

         <h4>C - Programming Language</h4>
         <p class="front_page_desc">The name of the language is simply "C". It is called C because it was built to succeed a programming language called "B". The C programming language was created by Dennis Ritchie around the early 1970's when he was working at Bell Labs. The language is still used widely in virtually most computer systems. </p><br />
         <p class="front_page_desc">The C programming language is the best way to talk to a computer directly.  Mostly suited for developing applicaitons that need a high degree of precision and speed and also to make custom software to suit just your own specific needs.  For example the software in your cellphone that converts your voice in to digital 1's and 0's is probably a C program at the heart of it - or the large supercomputers that predict the weather patterns have all their algorithms written in C. </p> <br />
        <p class="front_page_desc">   The C programming lets you tap in the raw power of the computer and its capabilities much more than other high level languages. C therefore has a bit of dependency on the physical CPU that needs to be considered. If you are writing an application such as a webserver or a database, generally you might not have to worry about such issues. However if you are writing a <b>device driver</b> then you will need to take these dependencies into account.</p> <br />

         <h4>Java</h4>
         <p class="front_page_desc">Java, named after a type of coffee was built by James Gosling at Sun Microsystems in 1996. The programming language was intended to be 100% portable from one system to another. At the time, the world wide web was gaining popularity and given the flexibility of Java, web browsers were given the ability to run Java code within a browser leading to powerful apps that could be run from the internet rather than having the software installed on your computer.</p><br />
         <p class="front_page_desc">Java also employees a programming feature called Object Oriented Programming, which makes it very powerful and flexible and allows of re-usability of code. You are able to build java in small components and integrate these small components into larger ones and incorporate the larger ones into even larger ones. It gave way to a hierarchical architecture which is very similar to have real life objects are made of smaller things combined or put together.</p>
          <p class="front_page_desc">For example, a 2.0 Litre engine can be found in a VW Passat, but you could also find the same engine in a VW Jetta, but with a slight modification of having a Turbo Charger. The same engine of the Passat can be used, and then the turbocharger is added to it. Also the car looks differnt from the outside, but the functioning of the engine is the same, except for the turbocharger.  In the same way, Java lets you write instructions to build applications that look quite different from the outside, but makes use of the same components internally, maybe with a few additions to the core "engine" or in this case the core "code". You do not have to keep writing a new engine or a component everytime you make minor changes to the engine. </p> <br />

      </div>
      <div class="col-md-2">
      </div>
    </div>

    <hr>

  </div> <!-- /container -->

</main>

  <% include ../../../partials/code/enu/tail.ejs %>
  <% include ../../../partials/code/enu/main-footer.ejs %>
