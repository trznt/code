<!doctype html>
<html lang="en">
<head>
  <% include ../../../partials/algo/enu/head.ejs %>
  <title>Algorithms Introduction</title>
</head>

<header>
  <% include ../../../partials/algo/enu/main-header.ejs %>
</header>

<body>
<main role="main">

  <!-- Main jumbotron for a primary marketing message or call to action -->
  <div class="jumbotron front_page">
    <div class="container"><br /><br /><br /><br /><br />
      <h1 class="display-1">Algorithms</h1>
    </div>
  </div>

  <div class="container-fluid">
    <!-- Example row of columns -->
    <br />
    <div class="row">
      <% include ../../../partials/algo/enu/sidenav.ejs %>
      <div class="col">
        <br />
        <h2>We've run out of milk!<br /><br />
        <p class="front_page_desc"><br />Imagine your mom asks you to go get some milk from the store. You say, "But why!, I don't want to go". You'd rather sit at home and finish watching your TV show. But lets assume in this case you are ready to go. <br /><br />So how do you go about getting the milk? It's a no-brainer really. You just go to the store and get it. But let's just take a moment to write down step by step what you would generally end up doing for the most part - getting milk from the store:</p>
        <p class="front_page_desc"><ul class="list">
          <li>Step  1: Get the cash from your mom!</li>
          <li>Step  2: Grab the car keys.</li>
          <li>Step  3: Drive to the store.</li>
          <li>Step  4: Walk to the aisle where the milk is</li>
          <li>Step  5: Pick up the bottle</li>
          <li>Step  6: Walk up to the cashiere</li>
          <li>Step  7: Pay the cash</li>
          <li>Step  8: Get the change</li>
          <li>Step  9: Walk out the store get to your ride</li>
          <li>Step 10: Head back home</li>
          <li>Step 11: Give the milk bottle to your mom</li>
        </ul>
        </p>
        <br /><p class="front_page_desc">
          Awesome, That wasen't hard, was it? So when you were asked to get some milk - you followed a set of steps to get the job done. <br /><br />Generally in life we really don't lay down steps for every errand that we run. But for a computer to do any task, even the smallest one of just counting up from 1 to 10, needs a set of instructions. A computer cannot think on its own, It needs to be told what to do. <br /><br />Some comupters these days seem like they do "think", but at the heart of it, they are still following a set of instructions - it just comes across to us like the computer is thinking on its own. So...</p><br />
          <h2>What is an Algorithm?</h2>
          <p class="front_page_desc">
             An Algorithm is just a name for a set of steps or rules that a comptuer follows to perfom a task or solve a problem. A set of instructions telling the computer <b>what to do</b> and <b>how to do it</b>. Thats about it. You <u>never</u> need to tell a computer <b>why!</b> it needs to be done.
          </p>
          <p class="front_page_desc">
            It's great to have someone, or in this case, something do a task for you without asking why. Computers have really become useful all over the world because - firstly, it can perform calculations millions of times faster than the human mind and secondly it doesn't ever ask you why it has to do those calculations. This is the reason why computers are taking over many of the tasks and jobs that humans used to once do.
          </p>

          <p class="front_page_desc">
            So now you are wondering, maybe the next time your mom asked you to get milk - I'll get a computer - a robot - to do the job for me. Perfect, no more distractions from watching your favourite TV show or playing the new Battlefield game on your console.
          </p><br />

          <h2>Writing an Algorithm</h2>
          <p class="front_page_desc">
            So you list down the steps the computer needs to follow. It's pretty much the 11 steps you laid above. Everything looks good - you have a set of steps and robot will start following these steps starting at the first step and then ending at last step. <br /><br />But suddenly you wonder, what if the car runs out of gas while the robot goes to the store. Hmm - you definitely do not want your robot to be stuck on the road. So you add another step between 2 and 3 where the robot which check if there is enough gas and then make a decision whether to take the car or ride the bike instead.
          </p>

          <p class="front_page_desc"><ul class="list">
            <li>Step  2: Grab the car keys.</li>
              <li> <b>-----  New Step:  Check if there is enough gas in the car - make a pitstop to put in gas.</b> </li>
            <li>Step  3: Drive to the store.</li>
            </ul>
          </p>
          <br />
          <h3>if-then-else</h3>
          <br />
          <p class="front_page_desc">
            The new step you added is called an <b>if-then</b> contruct. It's a pattern you will see everywhere in various algorithms. It's used for letting the computer make a decision. Let's break it down:
            <pre class="front_page_desc">

              <b>if</b> there is not enough gas to get to the store
                  <b>then</b> make a pitstop at the closest gas station
                <b>else</b> go directly to the store
            </pre>
          </p>
          <p class="front_page_desc">
            Perfect - now you can easily have the robot check to see the fuel guage and make a decision as to wheter you go straight to the store or to the gas station first.
          </p>
          <br />


          <p class="front_page_desc">
            Okay, this is looking good. But then you wonder, what if the store has run out of milk and the robot needs to go to a different store. We haven't instructed the robot what to do in this scenario. So let's do that now.
          </p>

         <p class="front_page_desc">

         </p>

          <ul class="list">
            <li>Step  3: Drive to the store.</li>
            <li> ---- New Step : Check <b>if</b> there's milk first with an employee of the store.</li>
              <li>
                Step 4: <b>then</b> Walk to the isle
              </li>
              <li>
                ---- Another New Step : <b>else</b> drive to the next store
              </li>
          </ul>
          <br />

          <p class="front_page_desc">
            Now there is no gaurantee that the next store will have milk either. So you may need to go to a 3rd store and maybe a 4th store.. who knows how many.
          </p>
          <br />
          <h3>loops</h3>
          <p class="front_page_desc">
            So it looks like there is no way out than to go to each store and check out if they have milk before moving to the next. But, when you are writing instructions, how do you write instructions for each store visit with out even knowing if its store no. 3 or 5 or 10 that finally ends up being the one where milk is avaialble.
            <br /><br />
            We need a way to keep visiting new stores until we find one where milk is avaiable. So what we can try to do is define a new step called 'drive to the next store' and once we are at the new store we can check with the employee of they have the milk and then make a decision, if its there - we go ahead and buy it and if it isn't we go to the next store. Let's see how we can write that in steps:
          </p>
          <br />
      <pre class="front_page_desc">
            Step 3: Drive to the store.
      --->  Step 4: <b>if</b> there's milk.
      |     Step 5: <b>then</b> skip step 6 and go
      |                        directly to step 7.
      ----- Step 6: <b>else</b> there's no milk - so we drive
                    to the next store and re-do steps
                    starting from step 4
            Step 7: Walk to the aisle where the milk is
            Step 8: Pick up the bottle
          </pre>
          <p class="front_page_desc"> Now you can see that we are having a "loop" in our instructions, since from Step 6 we continuously keep going back to step 4. On Step 4 we check if have milk and if there isn't any milk, then the <b>if-then-else</b> construct takes us to step 6 which again brings back to step 4. </p>
          <p class="front_page_desc">
            Only when the robot finally finds the milk then we skip step 6 and go directly to Step 7. Until then the robot repeats or loops through the same set of instructions.
          </p>
          <p class="front_page_desc">
            We have finally managed to describe a set of tasks to make our robot finally go jumping around from one step to another and sometimes skipping certain steps to finally achieve the end goal. Let's try to now list down all the steps of our algorithm  and tidy up the flow of steps so that we can make it more straighforward for us and the robot to understand.
          </p>

          <p class="front_page_desc"><ul class="list">
            <li>Step  1: Get the cash from your mom!</li>
            <li>Step  2: Grab the car keys.</li>
            <li>Step  3: If there's enough gas in the car </li>
            <li>Step  4: Then, drive directly to the store. </li>
            <li>Step  5: Else, make a pitstop at the gas staion and then go to the store. </li>
            <li>Step  6: Once at the store, check with an employee if there's milk.</li>
            <li>Step  7: If there's milk then go to step 10</li>
            <li>Step  8: else Walk out the store get to the car</li>
            <li>Step  9:  drive to the next closest store and perform steps starting from step 6</li>
            <li>Step  10: Walk to the aisle where the milk is </li>
            <li>Step  11: Pick up the bottle</li>
            <li>Step  12: Walk up to the cashiere</li>
            <li>Step  13: Pay the cash</li>
            <li>Step  14: Get the change</li>
            <li>Step  15: Walk out the store get to the car</li>
            <li>Step  16: Head back home</li>
            <li>Step  17: Give the milk bottle to your mom</li>
          </ul>
          </p>
          <p class="front_page_desc">
            You now have created your very own algorithm! The algorthm instructs the robot to get milk from the store. No longer do you need to do dumb chores. However there's another potential problem - in case the robot doesn't find milk at the first store and has to go to the next one, what if the gas runs out then. Maybe it's always a better idea to just check the fuel guage everytime the robot decides to go to the next store. Try modifying the instructions and see how you can make the robot work better.
          </p>
          <br />
            <p class="front_page_desc">
              Writing the algorithm is easy. But how do you make it better? How do you make it universal ? What if you lived in the first floor and needed the robot to climb a set of stairs? What if the robot had to use a revolving door? How many stores do you go to until you decide enough since your robot may just run out of power and needs to recharge? There are so many possibilities. You should always think about "the what if's"! You may never end up making the perfect robot at the beginning, but you will get there eventually. Once you do - can sell your robots and become a billionaire!

      </div>
      <div class="col-md-2">
      </div>
    </div>

    <hr>

  </div> <!-- /container -->

</main>
</body>
  <% include ../../../partials/algo/enu/tail.ejs %>
  <% include ../../../partials/algo/enu/main-footer.ejs %>
